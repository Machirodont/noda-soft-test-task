package main

import (
	"fmt"
	"runtime/debug"
	"time"

	m "hr/golang/test/taskman"
)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Приложение эмулирует получение и обработку тасков в асинхронном многопоточном режиме
// В конце выводятся успешные таски и ошибки выполнения остальных тасков (при большом количестве выводится только часть и общее количество)
// Вся логика инкапсулирована в пакете taskman (в предыдущей версии в типе-классе TaskManager).
// Память не течет, гонки нет, работает в конечном и бесконечном режимах, считает факториалы вместо сна, выдает цветной отчет
func main() {
	start := time.Now()				// Время старта

	m.BufCap = 10					// ёмкость кольцевого буфера, это же значение используется для ограничения вывода результатов
	m.MaxCount = -1			    		// число итераций = тасков (половина в мапе). Если <=0, то бесконечно!

	m.MaxResult = 100000	  			// Максимальное количество хранимых результатов и ошибок, после которого они выгружаются
	debug.SetGCPercent(10)				// Сборщик мусора вызывать "почаще"

	m.Run()						// Запускаем. Ждем окончания работы или нажимаем любую клавишу
	duration := time.Since(start)			// Замеряем длительность

	m.Log()						// Выводим лог и статистику
	fmt.Println("Время начала программы.....: ",start)
	fmt.Println("Время завершения...........: ",time.Now())
	fmt.Println("Длительность...............: ",duration)
	fmt.Println("Обработано задач...........: ",m.Counter()-1)
	fmt.Println("Пиковое количество горутин.: ",m.GoPeakCount())
}

