package main

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"
)

// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —ç–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–∏—Ö —Ç–∞—Å–∫–æ–≤.
// –ü—ã—Ç–∞–µ—Ç—Å—è –∏ –ø–æ–ª—É—á–∞—Ç—å, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.
// –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Å–∫–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
// –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω—ã–µ —Ç–∞—Å–∫–∏
// –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Å–∫–æ–≤.

// –ó–ê–î–ê–ù–ò–ï: —Å–¥–µ–ª–∞—Ç—å –∏–∑ –ø–ª–æ—Ö–æ–≥–æ –∫–æ–¥–∞ —Ö–æ—Ä–æ—à–∏–π –∏ —Ä–∞–±–æ—á–∏–π - as best as you can.
// –í–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ—á–Ω—ã—Ö —Ç–∞—Å–∫–æ–≤.
// –í–∞–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞—Å–∫–æ–≤.
// –°–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º—É–ª—å—Ç–∏–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π.
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ pull-request –≤ github
// –ö–∞–∫ –≤–∏–¥–∏—Ç–µ, –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º –Ω–µ—Ç - –ø–æ–ª–Ω—ã–π –∫–∞—Ä—Ç-–±–ª–∞–Ω—à –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞.

// *******************

// –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.

// –í –∫–æ–¥–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª `superChan` —É–∫–∞–∑–∞–Ω —Å –±—É—Ñ–µ—Ä–æ–º 10.
// –ü–æ—Å–∫–æ–ª—å–∫—É Uber –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É—Ñ–µ—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã https://github.com/uber-go/guide/blob/master/style.md#channel-size-is-one-or-none
// –¥–µ–ª–∞—é –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ –∏–º–µ–ª—Å—è –≤–≤–∏–¥—É –ø—É–ª –∏–∑ –¥–µ—Å—è—Ç–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤,
// –≤–µ–¥—å –∑–∞–ø—É—Å–∫–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ—ë–º–∫–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω-–≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–µ –µ—Å—Ç—å –≥—É—Ç.

// –û–±—ã—á–Ω–æ, –¥–ª—è –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–¥–∞—á —Å –≤–æ—Ä–∫–µ—Ä-–ø—É–ª–æ–º, –ø–∞–π–ø-–ª–∞–π–Ω–∞–º–∏ –∏ –∑–∞–ø—É—Å–∫–æ–º –¥–∂–æ–±–æ–≤ –ø–æ –∫—Ä–æ–Ω—É,
// –∏—Å–ø–æ–ª—å–∑—É—é –≥–æ—Ç–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–∏–ø–∞ –≤–æ—Ç —ç—Ç–æ–π: https://github.com/autom8ter/machine
// –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–∞–∫–µ—Ç `errgroup.WithContext` –Ω–æ –∑–¥–µ—Å—å —é–∑–∞—é —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É.

// –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —ç—Ç–æ. –õ—ë–≥–∫–æ–≥–æ –í–∞–º –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è üôèüå¥

// *******************

type Task struct {
	result     []byte // –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–ª—è GC padding & alignment
	err        error
	createdAt  string
	finishedAt string
	id         int
}

func (t Task) String() string {
	return fmt.Sprintf("Task id %d time %s, result %s", t.id, t.createdAt, t.result)
}

const (
	numWorkers = 10
	workTime   = time.Second * 3
)

func main() {

	deadlineCtx, cancel := context.WithTimeout(context.Background(), workTime)
	defer cancel()

	taskChan := generateTasks(deadlineCtx)

	result, errs := taskPipeline(taskChan)

	log.Println("Errors:")
	for _, e := range errs {
		log.Println(e)
	}

	log.Println("Done tasks:")
	for _, t := range result {
		log.Println(t)
	}
}

func taskPipeline(superChan chan Task) (map[int]Task, []error) {

	successTasksChan := make(chan Task)
	errTasksChan := make(chan error)

	stopChan := make(chan struct{})

	taskProcesser := func(t Task) Task {

		_, err := time.Parse(time.RFC3339, t.createdAt)
		if err != nil {
			t.result = []byte("something went wrong")
			t.err = fmt.Errorf("Task id %d time %s, error %s", t.id, t.createdAt, t.result)
		} else {
			t.result = []byte("task has been successed")
		}

		t.finishedAt = time.Now().Format(time.RFC3339Nano)

		time.Sleep(time.Millisecond * 150)

		return t
	}

	taskSorter := func(t Task) {

		if t.err != nil {
			select {
			case <-stopChan:
				return
			case errTasksChan <- t.err:
			}
		} else {
			select {
			case <-stopChan:
				return
			case successTasksChan <- t:
			}
		}
	}

	worker := func(wg *sync.WaitGroup, superChan chan Task) {
		defer wg.Done()

		for t := range superChan {
			t := t // https://golang.org/doc/faq#closures_and_goroutines

			go taskSorter(taskProcesser(t))
		}

	}

	launchWorkers := func(superChan chan Task) {
		wg := &sync.WaitGroup{}
		wg.Add(numWorkers)

		for i := 0; i < numWorkers; i++ {
			go worker(wg, superChan)
		}

		// –¥–æ–∂–∏–¥–∞—é—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —á–∏—Ç–∞—é—â–∏—Ö –≤—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª –≤–æ—Ä–∫–µ—Ä–æ–≤, —á—Ç–æ–±—ã —Ç–µ–ø–µ—Ä—å
		// –¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø–∞–π–ø-–ª–∞–π–Ω–∞.
		wg.Wait()
		close(stopChan)
	}
	go launchWorkers(superChan)

	result := make(map[int]Task)
	errs := []error{}

	gatherResults := func() {
		for {
			select {
			case <-stopChan:
				return
			case t := <-successTasksChan:
				result[t.id] = t
			case e := <-errTasksChan:
				errs = append(errs, e)
			}
		}
	}
	gatherResults()

	return result, errs
}

func generateTasks(deadline context.Context) chan Task {

	superChan := make(chan Task)

	go func() {
		defer close(superChan)

		for {
			select {
			case <-deadline.Done():
				return
			default:
			}

			// –≤ –∑–∞–¥–∞–Ω–∏–∏ —Å–∫–∞–∑–∞–Ω–æ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ –º–µ–Ω—è—Ç—å. —Ö–æ—Ç–µ–ª –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å,
			// –Ω–æ —Ç—É—Ç –≤—Å—ë –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø–ª–æ—Ö–æ, —á—Ç–æ —Ä–µ—à–∏–ª –ø—Ä–∏–Ω—è—Ç—å –≤–æ–ª–µ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏
			// –≤—Å—ë—Ç–∫–∏ –ø–æ—á–∏–Ω–∏—Ç—å.

			// –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ç —Ç–∞—Å–∫–∏ –Ω–æ–Ω-—Å—Ç–æ–ø, –Ω–æ –≤–µ—à–∞–µ—Ç –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ id-—à–Ω–∏–∫–∏,
			// –ø–æ—Å–∫–æ–ª—å–∫—É id-—à–Ω–∏–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —Ü–µ–ª–æ–π 1 —Å–µ–∫—É–Ω–¥—ã.
			// –∞ –≤ –∏—Ç–æ–≥–æ–≤–æ–π –ú–∞–ø–µ –≤—Å–µ —Ç–∞—Å–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ id-—à–Ω–∏–∫–∞–º–∏ –∑–∞–º–µ–Ω—è—é—Ç—Å—è,
			// –≤ –∏—Ç–æ–≥–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–∞—Å–∫–∞ —Å —Ç–∞–∫–∏–º id-—à–Ω–∏–∫–æ–º.
			// –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É, –≥–µ–Ω–µ—Ä–∏—Ç—å id –Ω—É–∂–Ω–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ —Ç–∏–ø–∞ –≥—É–≥–ª–æ–≤—Å–∫–æ–π uuid https://github.com/google/uuid

			ft := time.Now().Format(time.RFC3339)

			// —É—Å–ª–æ–≤–∏–µ Nanosecond()%2 —Ä–µ–¥–∫–æ –¥–∞—ë—Ç 0, –∏–∑-–∑–∞ —á–µ–≥–æ error-–∫–µ–π—Å–æ–≤ –ø–æ—á—Ç–∏ –Ω–µ –±—ã–≤–∞–µ—Ç,
			// –ø–æ—ç—Ç–æ–º—É –∑–∞–º–µ–Ω–∏–ª —É—Å–ª–æ–≤–∏–µ –Ω–∞ %3.
			if time.Now().Nanosecond()%3 > 0 {
				ft = "Some error occured"
			}
			t := Task{createdAt: ft, id: int(time.Now().UnixMilli())}

			select {
			case <-deadline.Done():
				return
			case superChan <- t:
			}

			// –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ id-—à–Ω–∏–∫–æ–≤
			time.Sleep(time.Millisecond * 300)
		}
	}()

	return superChan
}
